using System.ComponentModel;
using System.Reflection;

namespace GameBoy.Core;

public static class OpcodeExtensions
{
    private static readonly byte[] s_immediateByteCounts = [
        0, 2, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 1, 0,
        1, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,
        1, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,
        1, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 2, 2, 2, 0, 1, 0, 0, 0, 2, 0, 2, 2, 1, 0,
        0, 0, 2, 0, 2, 0, 1, 0, 0, 0, 2, 0, 2, 0, 1, 0,
        1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 0, 0, 1, 0,
        1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 0, 0, 1, 0,
    ];

    private static readonly string[] s_descriptions = [.. typeof(Opcode)
            .GetFields()
            .Where(x => x.IsLiteral)
            .OrderBy(x => (byte)x.GetRawConstantValue()!)
            .Select(x => x.GetCustomAttribute<DescriptionAttribute>()!.Description)];

    private static readonly unsafe delegate*<Instruction, Bus, ref CpuRegisters, byte>[] s_functionTable = [
        &Ops.NOP,
        &Ops.LD_BC_d16,
        &Ops.LD_ptr_BC_A,
        &Ops.INC_BC,
        &Ops.INC_B,
        &Ops.DEC_B,
        &Ops.LD_B_d8,
        &Ops.RLCA,
        &Ops.LD_ptr_a16_SP,
        &Ops.ADD_HL_BC,
        &Ops.LD_A_ptr_BC,
        &Ops.DEC_BC,
        &Ops.INC_C,
        &Ops.DEC_C,
        &Ops.LD_C_d8,
        &Ops.RRCA,
        &Ops.STOP_d8,
        &Ops.LD_DE_d16,
        &Ops.LD_ptr_DE_A,
        &Ops.INC_DE,
        &Ops.INC_D,
        &Ops.DEC_D,
        &Ops.LD_D_d8,
        &Ops.RLA,
        &Ops.JR_e8,
        &Ops.ADD_HL_DE,
        &Ops.LD_A_ptr_DE,
        &Ops.DEC_DE,
        &Ops.INC_E,
        &Ops.DEC_E,
        &Ops.LD_E_d8,
        &Ops.RRA,
        &Ops.JR_NZ_e8,
        &Ops.LD_HL_d16,
        &Ops.LD_HLI_A,
        &Ops.INC_HL,
        &Ops.INC_H,
        &Ops.DEC_H,
        &Ops.LD_H_d8,
        &Ops.DAA,
        &Ops.JR_Z_e8,
        &Ops.ADD_HL_HL,
        &Ops.LD_A_HLI,
        &Ops.DEC_HL,
        &Ops.INC_L,
        &Ops.DEC_L,
        &Ops.LD_L_d8,
        &Ops.CPL,
        &Ops.JR_NC_e8,
        &Ops.LD_SP_d16,
        &Ops.LD_HLD_A,
        &Ops.INC_SP,
        &Ops.INC_ptr_HL,
        &Ops.DEC_ptr_HL,
        &Ops.LD_ptr_HL_d8,
        &Ops.SCF,
        &Ops.JR_C_e8,
        &Ops.ADD_HL_SP,
        &Ops.LD_A_HLD,
        &Ops.DEC_SP,
        &Ops.INC_A,
        &Ops.DEC_A,
        &Ops.LD_A_d8,
        &Ops.CCF,
        &Ops.LD_B_B,
        &Ops.LD_B_C,
        &Ops.LD_B_D,
        &Ops.LD_B_E,
        &Ops.LD_B_H,
        &Ops.LD_B_L,
        &Ops.LD_B_ptr_HL,
        &Ops.LD_B_A,
        &Ops.LD_C_B,
        &Ops.LD_C_C,
        &Ops.LD_C_D,
        &Ops.LD_C_E,
        &Ops.LD_C_H,
        &Ops.LD_C_L,
        &Ops.LD_C_ptr_HL,
        &Ops.LD_C_A,
        &Ops.LD_D_B,
        &Ops.LD_D_C,
        &Ops.LD_D_D,
        &Ops.LD_D_E,
        &Ops.LD_D_H,
        &Ops.LD_D_L,
        &Ops.LD_D_ptr_HL,
        &Ops.LD_D_A,
        &Ops.LD_E_B,
        &Ops.LD_E_C,
        &Ops.LD_E_D,
        &Ops.LD_E_E,
        &Ops.LD_E_H,
        &Ops.LD_E_L,
        &Ops.LD_E_ptr_HL,
        &Ops.LD_E_A,
        &Ops.LD_H_B,
        &Ops.LD_H_C,
        &Ops.LD_H_D,
        &Ops.LD_H_E,
        &Ops.LD_H_H,
        &Ops.LD_H_L,
        &Ops.LD_H_ptr_HL,
        &Ops.LD_H_A,
        &Ops.LD_L_B,
        &Ops.LD_L_C,
        &Ops.LD_L_D,
        &Ops.LD_L_E,
        &Ops.LD_L_H,
        &Ops.LD_L_L,
        &Ops.LD_L_ptr_HL,
        &Ops.LD_L_A,
        &Ops.LD_ptr_HL_B,
        &Ops.LD_ptr_HL_C,
        &Ops.LD_ptr_HL_D,
        &Ops.LD_ptr_HL_E,
        &Ops.LD_ptr_HL_H,
        &Ops.LD_ptr_HL_L,
        &Ops.HALT,
        &Ops.LD_ptr_HL_A,
        &Ops.LD_A_B,
        &Ops.LD_A_C,
        &Ops.LD_A_D,
        &Ops.LD_A_E,
        &Ops.LD_A_H,
        &Ops.LD_A_L,
        &Ops.LD_A_ptr_HL,
        &Ops.LD_A_A,
        &Ops.ADD_A_B,
        &Ops.ADD_A_C,
        &Ops.ADD_A_D,
        &Ops.ADD_A_E,
        &Ops.ADD_A_H,
        &Ops.ADD_A_L,
        &Ops.ADD_A_ptr_HL,
        &Ops.ADD_A_A,
        &Ops.ADC_A_B,
        &Ops.ADC_A_C,
        &Ops.ADC_A_D,
        &Ops.ADC_A_E,
        &Ops.ADC_A_H,
        &Ops.ADC_A_L,
        &Ops.ADC_A_ptr_HL,
        &Ops.ADC_A_A,
        &Ops.SUB_A_B,
        &Ops.SUB_A_C,
        &Ops.SUB_A_D,
        &Ops.SUB_A_E,
        &Ops.SUB_A_H,
        &Ops.SUB_A_L,
        &Ops.SUB_A_ptr_HL,
        &Ops.SUB_A_A,
        &Ops.SBC_A_B,
        &Ops.SBC_A_C,
        &Ops.SBC_A_D,
        &Ops.SBC_A_E,
        &Ops.SBC_A_H,
        &Ops.SBC_A_L,
        &Ops.SBC_A_ptr_HL,
        &Ops.SBC_A_A,
        &Ops.AND_A_B,
        &Ops.AND_A_C,
        &Ops.AND_A_D,
        &Ops.AND_A_E,
        &Ops.AND_A_H,
        &Ops.AND_A_L,
        &Ops.AND_A_ptr_HL,
        &Ops.AND_A_A,
        &Ops.XOR_A_B,
        &Ops.XOR_A_C,
        &Ops.XOR_A_D,
        &Ops.XOR_A_E,
        &Ops.XOR_A_H,
        &Ops.XOR_A_L,
        &Ops.XOR_A_ptr_HL,
        &Ops.XOR_A_A,
        &Ops.OR_A_B,
        &Ops.OR_A_C,
        &Ops.OR_A_D,
        &Ops.OR_A_E,
        &Ops.OR_A_H,
        &Ops.OR_A_L,
        &Ops.OR_A_ptr_HL,
        &Ops.OR_A_A,
        &Ops.CP_A_B,
        &Ops.CP_A_C,
        &Ops.CP_A_D,
        &Ops.CP_A_E,
        &Ops.CP_A_H,
        &Ops.CP_A_L,
        &Ops.CP_A_ptr_HL,
        &Ops.CP_A_A,
        &Ops.RET_NZ,
        &Ops.POP_BC,
        &Ops.JP_NZ_a16,
        &Ops.JP_a16,
        &Ops.CALL_NZ_a16,
        &Ops.PUSH_BC,
        &Ops.ADD_A_d8,
        &Ops.RST_00,
        &Ops.RET_Z,
        &Ops.RET,
        &Ops.JP_Z_a16,
        &Ops.PREFIX,
        &Ops.CALL_Z_a16,
        &Ops.CALL_a16,
        &Ops.ADC_A_d8,
        &Ops.RST_08,
        &Ops.RET_NC,
        &Ops.POP_DE,
        &Ops.JP_NC_a16,
        &Ops.ILLEGAL_D3,
        &Ops.CALL_NC_a16,
        &Ops.PUSH_DE,
        &Ops.SUB_A_d8,
        &Ops.RST_10,
        &Ops.RET_C,
        &Ops.RETI,
        &Ops.JP_C_a16,
        &Ops.ILLEGAL_DB,
        &Ops.CALL_C_a16,
        &Ops.ILLEGAL_DD,
        &Ops.SBC_A_d8,
        &Ops.RST_18,
        &Ops.LDH_ptr_a8_A,
        &Ops.POP_HL,
        &Ops.LDH_ptr_C_A,
        &Ops.ILLEGAL_E3,
        &Ops.ILLEGAL_E4,
        &Ops.PUSH_HL,
        &Ops.AND_A_d8,
        &Ops.RST_20,
        &Ops.ADD_SP_e8,
        &Ops.JP_HL,
        &Ops.LD_ptr_a16_A,
        &Ops.ILLEGAL_EB,
        &Ops.ILLEGAL_EC,
        &Ops.ILLEGAL_ED,
        &Ops.XOR_A_d8,
        &Ops.RST_28,
        &Ops.LDH_A_ptr_a8,
        &Ops.POP_AF,
        &Ops.LDH_A_ptr_C,
        &Ops.DI,
        &Ops.ILLEGAL_F4,
        &Ops.PUSH_AF,
        &Ops.OR_A_d8,
        &Ops.RST_30,
        &Ops.LD_HL_SP_e8,
        &Ops.LD_SP_HL,
        &Ops.LD_A_ptr_a16,
        &Ops.EI,
        &Ops.ILLEGAL_FC,
        &Ops.ILLEGAL_FD,
        &Ops.CP_A_d8,
        &Ops.RST_38,
    ];

    extension(Opcode opcode)
    {
        public byte ImmediateByteCount => s_immediateByteCounts[(byte)opcode];
        public string Description => s_descriptions[(byte)opcode];
        public unsafe delegate*<Instruction, Bus, ref CpuRegisters, byte> Exec => s_functionTable[(byte)opcode];
    }
}
