using System.ComponentModel;
using System.Reflection;

namespace GameBoy.Core;

public static class OpcodeExtensions
{
    // CB (PREFIX) gets 1 immediate byte instead of 0, so that we store the opcode.
    private static readonly byte[] s_immediateByteCounts = [
        0, 2, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 1, 0,
        1, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,
        1, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,
        1, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 2, 2, 2, 0, 1, 0, 0, 0, 2, 1, 2, 2, 1, 0,
        0, 0, 2, 0, 2, 0, 1, 0, 0, 0, 2, 0, 2, 0, 1, 0,
        1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 0, 0, 1, 0,
        1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 0, 0, 1, 0,
    ];

    private static readonly string[] s_descriptions = [.. typeof(Opcode)
            .GetFields()
            .Where(x => x.IsLiteral)
            .OrderBy(x => (byte)x.GetRawConstantValue()!)
            .Select(x => x.GetCustomAttribute<DescriptionAttribute>()!.Description)];

    private static readonly Func<Cpu, Instruction, byte>[] s_functionTable = [
        static (cpu, instruction) => cpu.NOP(instruction),
        static (cpu, instruction) => cpu.LD_BC_d16(instruction),
        static (cpu, instruction) => cpu.LD_ptr_BC_A(instruction),
        static (cpu, instruction) => cpu.INC_BC(instruction),
        static (cpu, instruction) => cpu.INC_B(instruction),
        static (cpu, instruction) => cpu.DEC_B(instruction),
        static (cpu, instruction) => cpu.LD_B_d8(instruction),
        static (cpu, instruction) => cpu.RLCA(instruction),
        static (cpu, instruction) => cpu.LD_ptr_a16_SP(instruction),
        static (cpu, instruction) => cpu.ADD_HL_BC(instruction),
        static (cpu, instruction) => cpu.LD_A_ptr_BC(instruction),
        static (cpu, instruction) => cpu.DEC_BC(instruction),
        static (cpu, instruction) => cpu.INC_C(instruction),
        static (cpu, instruction) => cpu.DEC_C(instruction),
        static (cpu, instruction) => cpu.LD_C_d8(instruction),
        static (cpu, instruction) => cpu.RRCA(instruction),
        static (cpu, instruction) => cpu.STOP_d8(instruction),
        static (cpu, instruction) => cpu.LD_DE_d16(instruction),
        static (cpu, instruction) => cpu.LD_ptr_DE_A(instruction),
        static (cpu, instruction) => cpu.INC_DE(instruction),
        static (cpu, instruction) => cpu.INC_D(instruction),
        static (cpu, instruction) => cpu.DEC_D(instruction),
        static (cpu, instruction) => cpu.LD_D_d8(instruction),
        static (cpu, instruction) => cpu.RLA(instruction),
        static (cpu, instruction) => cpu.JR_e8(instruction),
        static (cpu, instruction) => cpu.ADD_HL_DE(instruction),
        static (cpu, instruction) => cpu.LD_A_ptr_DE(instruction),
        static (cpu, instruction) => cpu.DEC_DE(instruction),
        static (cpu, instruction) => cpu.INC_E(instruction),
        static (cpu, instruction) => cpu.DEC_E(instruction),
        static (cpu, instruction) => cpu.LD_E_d8(instruction),
        static (cpu, instruction) => cpu.RRA(instruction),
        static (cpu, instruction) => cpu.JR_NZ_e8(instruction),
        static (cpu, instruction) => cpu.LD_HL_d16(instruction),
        static (cpu, instruction) => cpu.LD_HLI_A(instruction),
        static (cpu, instruction) => cpu.INC_HL(instruction),
        static (cpu, instruction) => cpu.INC_H(instruction),
        static (cpu, instruction) => cpu.DEC_H(instruction),
        static (cpu, instruction) => cpu.LD_H_d8(instruction),
        static (cpu, instruction) => cpu.DAA(instruction),
        static (cpu, instruction) => cpu.JR_Z_e8(instruction),
        static (cpu, instruction) => cpu.ADD_HL_HL(instruction),
        static (cpu, instruction) => cpu.LD_A_HLI(instruction),
        static (cpu, instruction) => cpu.DEC_HL(instruction),
        static (cpu, instruction) => cpu.INC_L(instruction),
        static (cpu, instruction) => cpu.DEC_L(instruction),
        static (cpu, instruction) => cpu.LD_L_d8(instruction),
        static (cpu, instruction) => cpu.CPL(instruction),
        static (cpu, instruction) => cpu.JR_NC_e8(instruction),
        static (cpu, instruction) => cpu.LD_SP_d16(instruction),
        static (cpu, instruction) => cpu.LD_HLD_A(instruction),
        static (cpu, instruction) => cpu.INC_SP(instruction),
        static (cpu, instruction) => cpu.INC_ptr_HL(instruction),
        static (cpu, instruction) => cpu.DEC_ptr_HL(instruction),
        static (cpu, instruction) => cpu.LD_ptr_HL_d8(instruction),
        static (cpu, instruction) => cpu.SCF(instruction),
        static (cpu, instruction) => cpu.JR_C_e8(instruction),
        static (cpu, instruction) => cpu.ADD_HL_SP(instruction),
        static (cpu, instruction) => cpu.LD_A_HLD(instruction),
        static (cpu, instruction) => cpu.DEC_SP(instruction),
        static (cpu, instruction) => cpu.INC_A(instruction),
        static (cpu, instruction) => cpu.DEC_A(instruction),
        static (cpu, instruction) => cpu.LD_A_d8(instruction),
        static (cpu, instruction) => cpu.CCF(instruction),
        static (cpu, instruction) => cpu.LD_B_B(instruction),
        static (cpu, instruction) => cpu.LD_B_C(instruction),
        static (cpu, instruction) => cpu.LD_B_D(instruction),
        static (cpu, instruction) => cpu.LD_B_E(instruction),
        static (cpu, instruction) => cpu.LD_B_H(instruction),
        static (cpu, instruction) => cpu.LD_B_L(instruction),
        static (cpu, instruction) => cpu.LD_B_ptr_HL(instruction),
        static (cpu, instruction) => cpu.LD_B_A(instruction),
        static (cpu, instruction) => cpu.LD_C_B(instruction),
        static (cpu, instruction) => cpu.LD_C_C(instruction),
        static (cpu, instruction) => cpu.LD_C_D(instruction),
        static (cpu, instruction) => cpu.LD_C_E(instruction),
        static (cpu, instruction) => cpu.LD_C_H(instruction),
        static (cpu, instruction) => cpu.LD_C_L(instruction),
        static (cpu, instruction) => cpu.LD_C_ptr_HL(instruction),
        static (cpu, instruction) => cpu.LD_C_A(instruction),
        static (cpu, instruction) => cpu.LD_D_B(instruction),
        static (cpu, instruction) => cpu.LD_D_C(instruction),
        static (cpu, instruction) => cpu.LD_D_D(instruction),
        static (cpu, instruction) => cpu.LD_D_E(instruction),
        static (cpu, instruction) => cpu.LD_D_H(instruction),
        static (cpu, instruction) => cpu.LD_D_L(instruction),
        static (cpu, instruction) => cpu.LD_D_ptr_HL(instruction),
        static (cpu, instruction) => cpu.LD_D_A(instruction),
        static (cpu, instruction) => cpu.LD_E_B(instruction),
        static (cpu, instruction) => cpu.LD_E_C(instruction),
        static (cpu, instruction) => cpu.LD_E_D(instruction),
        static (cpu, instruction) => cpu.LD_E_E(instruction),
        static (cpu, instruction) => cpu.LD_E_H(instruction),
        static (cpu, instruction) => cpu.LD_E_L(instruction),
        static (cpu, instruction) => cpu.LD_E_ptr_HL(instruction),
        static (cpu, instruction) => cpu.LD_E_A(instruction),
        static (cpu, instruction) => cpu.LD_H_B(instruction),
        static (cpu, instruction) => cpu.LD_H_C(instruction),
        static (cpu, instruction) => cpu.LD_H_D(instruction),
        static (cpu, instruction) => cpu.LD_H_E(instruction),
        static (cpu, instruction) => cpu.LD_H_H(instruction),
        static (cpu, instruction) => cpu.LD_H_L(instruction),
        static (cpu, instruction) => cpu.LD_H_ptr_HL(instruction),
        static (cpu, instruction) => cpu.LD_H_A(instruction),
        static (cpu, instruction) => cpu.LD_L_B(instruction),
        static (cpu, instruction) => cpu.LD_L_C(instruction),
        static (cpu, instruction) => cpu.LD_L_D(instruction),
        static (cpu, instruction) => cpu.LD_L_E(instruction),
        static (cpu, instruction) => cpu.LD_L_H(instruction),
        static (cpu, instruction) => cpu.LD_L_L(instruction),
        static (cpu, instruction) => cpu.LD_L_ptr_HL(instruction),
        static (cpu, instruction) => cpu.LD_L_A(instruction),
        static (cpu, instruction) => cpu.LD_ptr_HL_B(instruction),
        static (cpu, instruction) => cpu.LD_ptr_HL_C(instruction),
        static (cpu, instruction) => cpu.LD_ptr_HL_D(instruction),
        static (cpu, instruction) => cpu.LD_ptr_HL_E(instruction),
        static (cpu, instruction) => cpu.LD_ptr_HL_H(instruction),
        static (cpu, instruction) => cpu.LD_ptr_HL_L(instruction),
        static (cpu, instruction) => cpu.HALT(instruction),
        static (cpu, instruction) => cpu.LD_ptr_HL_A(instruction),
        static (cpu, instruction) => cpu.LD_A_B(instruction),
        static (cpu, instruction) => cpu.LD_A_C(instruction),
        static (cpu, instruction) => cpu.LD_A_D(instruction),
        static (cpu, instruction) => cpu.LD_A_E(instruction),
        static (cpu, instruction) => cpu.LD_A_H(instruction),
        static (cpu, instruction) => cpu.LD_A_L(instruction),
        static (cpu, instruction) => cpu.LD_A_ptr_HL(instruction),
        static (cpu, instruction) => cpu.LD_A_A(instruction),
        static (cpu, instruction) => cpu.ADD_A_B(instruction),
        static (cpu, instruction) => cpu.ADD_A_C(instruction),
        static (cpu, instruction) => cpu.ADD_A_D(instruction),
        static (cpu, instruction) => cpu.ADD_A_E(instruction),
        static (cpu, instruction) => cpu.ADD_A_H(instruction),
        static (cpu, instruction) => cpu.ADD_A_L(instruction),
        static (cpu, instruction) => cpu.ADD_A_ptr_HL(instruction),
        static (cpu, instruction) => cpu.ADD_A_A(instruction),
        static (cpu, instruction) => cpu.ADC_A_B(instruction),
        static (cpu, instruction) => cpu.ADC_A_C(instruction),
        static (cpu, instruction) => cpu.ADC_A_D(instruction),
        static (cpu, instruction) => cpu.ADC_A_E(instruction),
        static (cpu, instruction) => cpu.ADC_A_H(instruction),
        static (cpu, instruction) => cpu.ADC_A_L(instruction),
        static (cpu, instruction) => cpu.ADC_A_ptr_HL(instruction),
        static (cpu, instruction) => cpu.ADC_A_A(instruction),
        static (cpu, instruction) => cpu.SUB_A_B(instruction),
        static (cpu, instruction) => cpu.SUB_A_C(instruction),
        static (cpu, instruction) => cpu.SUB_A_D(instruction),
        static (cpu, instruction) => cpu.SUB_A_E(instruction),
        static (cpu, instruction) => cpu.SUB_A_H(instruction),
        static (cpu, instruction) => cpu.SUB_A_L(instruction),
        static (cpu, instruction) => cpu.SUB_A_ptr_HL(instruction),
        static (cpu, instruction) => cpu.SUB_A_A(instruction),
        static (cpu, instruction) => cpu.SBC_A_B(instruction),
        static (cpu, instruction) => cpu.SBC_A_C(instruction),
        static (cpu, instruction) => cpu.SBC_A_D(instruction),
        static (cpu, instruction) => cpu.SBC_A_E(instruction),
        static (cpu, instruction) => cpu.SBC_A_H(instruction),
        static (cpu, instruction) => cpu.SBC_A_L(instruction),
        static (cpu, instruction) => cpu.SBC_A_ptr_HL(instruction),
        static (cpu, instruction) => cpu.SBC_A_A(instruction),
        static (cpu, instruction) => cpu.AND_A_B(instruction),
        static (cpu, instruction) => cpu.AND_A_C(instruction),
        static (cpu, instruction) => cpu.AND_A_D(instruction),
        static (cpu, instruction) => cpu.AND_A_E(instruction),
        static (cpu, instruction) => cpu.AND_A_H(instruction),
        static (cpu, instruction) => cpu.AND_A_L(instruction),
        static (cpu, instruction) => cpu.AND_A_ptr_HL(instruction),
        static (cpu, instruction) => cpu.AND_A_A(instruction),
        static (cpu, instruction) => cpu.XOR_A_B(instruction),
        static (cpu, instruction) => cpu.XOR_A_C(instruction),
        static (cpu, instruction) => cpu.XOR_A_D(instruction),
        static (cpu, instruction) => cpu.XOR_A_E(instruction),
        static (cpu, instruction) => cpu.XOR_A_H(instruction),
        static (cpu, instruction) => cpu.XOR_A_L(instruction),
        static (cpu, instruction) => cpu.XOR_A_ptr_HL(instruction),
        static (cpu, instruction) => cpu.XOR_A_A(instruction),
        static (cpu, instruction) => cpu.OR_A_B(instruction),
        static (cpu, instruction) => cpu.OR_A_C(instruction),
        static (cpu, instruction) => cpu.OR_A_D(instruction),
        static (cpu, instruction) => cpu.OR_A_E(instruction),
        static (cpu, instruction) => cpu.OR_A_H(instruction),
        static (cpu, instruction) => cpu.OR_A_L(instruction),
        static (cpu, instruction) => cpu.OR_A_ptr_HL(instruction),
        static (cpu, instruction) => cpu.OR_A_A(instruction),
        static (cpu, instruction) => cpu.CP_A_B(instruction),
        static (cpu, instruction) => cpu.CP_A_C(instruction),
        static (cpu, instruction) => cpu.CP_A_D(instruction),
        static (cpu, instruction) => cpu.CP_A_E(instruction),
        static (cpu, instruction) => cpu.CP_A_H(instruction),
        static (cpu, instruction) => cpu.CP_A_L(instruction),
        static (cpu, instruction) => cpu.CP_A_ptr_HL(instruction),
        static (cpu, instruction) => cpu.CP_A_A(instruction),
        static (cpu, instruction) => cpu.RET_NZ(instruction),
        static (cpu, instruction) => cpu.POP_BC(instruction),
        static (cpu, instruction) => cpu.JP_NZ_a16(instruction),
        static (cpu, instruction) => cpu.JP_a16(instruction),
        static (cpu, instruction) => cpu.CALL_NZ_a16(instruction),
        static (cpu, instruction) => cpu.PUSH_BC(instruction),
        static (cpu, instruction) => cpu.ADD_A_d8(instruction),
        static (cpu, instruction) => cpu.RST_00(instruction),
        static (cpu, instruction) => cpu.RET_Z(instruction),
        static (cpu, instruction) => cpu.RET(instruction),
        static (cpu, instruction) => cpu.JP_Z_a16(instruction),
        static (cpu, instruction) => cpu.PREFIX(instruction),
        static (cpu, instruction) => cpu.CALL_Z_a16(instruction),
        static (cpu, instruction) => cpu.CALL_a16(instruction),
        static (cpu, instruction) => cpu.ADC_A_d8(instruction),
        static (cpu, instruction) => cpu.RST_08(instruction),
        static (cpu, instruction) => cpu.RET_NC(instruction),
        static (cpu, instruction) => cpu.POP_DE(instruction),
        static (cpu, instruction) => cpu.JP_NC_a16(instruction),
        static (cpu, instruction) => cpu.ILLEGAL_D3(instruction),
        static (cpu, instruction) => cpu.CALL_NC_a16(instruction),
        static (cpu, instruction) => cpu.PUSH_DE(instruction),
        static (cpu, instruction) => cpu.SUB_A_d8(instruction),
        static (cpu, instruction) => cpu.RST_10(instruction),
        static (cpu, instruction) => cpu.RET_C(instruction),
        static (cpu, instruction) => cpu.RETI(instruction),
        static (cpu, instruction) => cpu.JP_C_a16(instruction),
        static (cpu, instruction) => cpu.ILLEGAL_DB(instruction),
        static (cpu, instruction) => cpu.CALL_C_a16(instruction),
        static (cpu, instruction) => cpu.ILLEGAL_DD(instruction),
        static (cpu, instruction) => cpu.SBC_A_d8(instruction),
        static (cpu, instruction) => cpu.RST_18(instruction),
        static (cpu, instruction) => cpu.LDH_ptr_a8_A(instruction),
        static (cpu, instruction) => cpu.POP_HL(instruction),
        static (cpu, instruction) => cpu.LDH_ptr_C_A(instruction),
        static (cpu, instruction) => cpu.ILLEGAL_E3(instruction),
        static (cpu, instruction) => cpu.ILLEGAL_E4(instruction),
        static (cpu, instruction) => cpu.PUSH_HL(instruction),
        static (cpu, instruction) => cpu.AND_A_d8(instruction),
        static (cpu, instruction) => cpu.RST_20(instruction),
        static (cpu, instruction) => cpu.ADD_SP_e8(instruction),
        static (cpu, instruction) => cpu.JP_HL(instruction),
        static (cpu, instruction) => cpu.LD_ptr_a16_A(instruction),
        static (cpu, instruction) => cpu.ILLEGAL_EB(instruction),
        static (cpu, instruction) => cpu.ILLEGAL_EC(instruction),
        static (cpu, instruction) => cpu.ILLEGAL_ED(instruction),
        static (cpu, instruction) => cpu.XOR_A_d8(instruction),
        static (cpu, instruction) => cpu.RST_28(instruction),
        static (cpu, instruction) => cpu.LDH_A_ptr_a8(instruction),
        static (cpu, instruction) => cpu.POP_AF(instruction),
        static (cpu, instruction) => cpu.LDH_A_ptr_C(instruction),
        static (cpu, instruction) => cpu.DI(instruction),
        static (cpu, instruction) => cpu.ILLEGAL_F4(instruction),
        static (cpu, instruction) => cpu.PUSH_AF(instruction),
        static (cpu, instruction) => cpu.OR_A_d8(instruction),
        static (cpu, instruction) => cpu.RST_30(instruction),
        static (cpu, instruction) => cpu.LD_HL_SP_e8(instruction),
        static (cpu, instruction) => cpu.LD_SP_HL(instruction),
        static (cpu, instruction) => cpu.LD_A_ptr_a16(instruction),
        static (cpu, instruction) => cpu.EI(instruction),
        static (cpu, instruction) => cpu.ILLEGAL_FC(instruction),
        static (cpu, instruction) => cpu.ILLEGAL_FD(instruction),
        static (cpu, instruction) => cpu.CP_A_d8(instruction),
        static (cpu, instruction) => cpu.RST_38(instruction),
    ];

    extension(Opcode opcode)
    {
        public byte ImmediateByteCount => s_immediateByteCounts[(byte)opcode];
        public string Description => s_descriptions[(byte)opcode];
        public Func<Cpu, Instruction, byte> Exec => s_functionTable[(byte)opcode];
    }
}
